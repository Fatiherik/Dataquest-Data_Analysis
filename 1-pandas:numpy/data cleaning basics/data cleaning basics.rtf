{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \'97 
\fs28 import pandas as pd\
laptops=pd.read_csv('laptops.csv', encoding='Latin-1')	            encoding default deger UTF-8, encoding yazmadan pd.read_csv yapinca encoding hatasi verirse baska encodinglerle denemek laz\uc0\u305 m.\
laptops.info()                                                                 \
\
\'97new_columns=[]\
for i in laptops.columns:\
    new_columns.append(i.strip())\
    \
laptops.columns=new_columns                          sutun isimlerinin ba\uc0\u351 \u305 ndaki ve sonundaki bo\u351 luklardan kutulduk ve yeniden verinin basliklarina atad\u305 k.\
\
\'97import pandas as pd\
laptops = pd.read_csv('laptops.csv', encoding='Latin-1')\
\
def clean_col(col_name):\
    col_name=col_name.strip()\
    col_name=col_name.replace('Operating System','os')\
    col_name=col_name.replace(' ','_')                                                 once sutun isimlerini istedigimiz formata ceviren fonk yazdik\
    col_name=col_name.replace('(','')\
    col_name=col_name.replace(')','')\
    col_name=col_name.lower()\
    return col_name\
\
new_columns=[]\
for i in laptops.columns:\
    clean_i=clean_col(i)                                                                          Eski kolonie isimlerine bu fonksiyonu uygulayarak istedi\uc0\u287 imiz formata cevirdik\
    new_columns.append(clean_i)\
    \
laptops.columns=new_columns						                      yeni sutun isimlerini dataya atad\uc0\u305 k\
\
\'97 unique_ram=laptops['ram'].unique()\
type_data=laptops['ram'].dtype 						 bir sutunu incelerken ilk bakacagimiz seyler. Unique ve dtype/ bir sutunun yani serinin type icin \'91dtype\'92 kullan\uc0\u305 yoruz, butun verinin yani dataframe type icin \'91dtypes\'92 kullan\u305 yoruz.\
\
\'97laptops['ram']=laptops['ram'].str.replace('GB','').astype(int)\
unique_ram=laptops['ram'].unique()					          ram sutunundaki GB ifadelerinden kurtulduk ve type int yapt\uc0\u305 k, boylece hepsi numeric oldu, artik s\u305 ralama yapabilece\u287 iz. str.replace kullandigimiza dikkat et!!!!!!\
\
\'97\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 laptops["ram"] = laptops["ram"].str.replace('GB','').astype(int)\
laptops.rename(\{'ram':'ram_gb'\}, axis=1, inplace=True)	             axis=1 diyerek sutundaki bir basligi de\uc0\u287 i\u351 tirmek istedi\u287 imizi s\'f6yl\'fcyoruz.    E\u287 er \'fcst\'fcne sat\u305 rdaki astype=int yazmazsak gb_ram sutunun type object kal\u305 r ve describe \
ram_gb_desc=laptops['ram_gb'].describe()                                     \outl0\strokewidth0 sonucu farkli \'e7\uc0\u305 kar\outl0\strokewidth0  -e\uc0\u287 er bir sutunda string ifade varsa type object olur- object ile int describe sonu\'e7lar\u305  farkl\u305  cikiyor, dikkat et!!!!!!\

\f1 \

\f0 \'97 laptops["gpu_manufacturer"] = (laptops["gpu"]\
                                       .str.split()\
                                       .str[0])\
laptops["cpu_manufacturer"] = (laptops["cpu"]			                            cpu ve gpu satirlarinda \'fcretici firma isimleri ile kodu yaz\uc0\u305 yordu sadece \'fcretici firma isimlerini almak icin split edip en bastaki eleman\u305  ald\u305 k.\
                                       .str.split()\
                                       .str[0])\
cpu_manufacturer_counts=laptops["cpu_manufacturer"].value_counts()
\f1\fs24 \
\

\f0\fs28 \'97 mapping_dict = \{\
    'Android': 'Android',\
    'Chrome OS': 'Chrome OS',\
    'Linux': 'Linux',\
    'Mac OS': 'macOS',\
    'No OS': 'No OS',\
    'Windows': 'Windows',\
    'macOS': 'macOS'\
\}\
laptops['os']=laptops['os'].map(mapping_dict)			                   os kolonunda hem Mac OS hem de Mac OS vardi bunu duzeltmek icin bu s\'f6zl\'fc\uc0\u287 \'fc kulland\u305 k\
\
\
\'97 laptops.isnull().sum()							                her kolondaki ayr\uc0\u305  ayr\u305  null toplam\u305 n\u305  veriyor\
\
\'97 laptops_no_null_rows=laptops.dropna(axis=0)		              verideki bos hucre iceren satirlari siler\
laptops_no_null_cols=laptops.dropna(axis=1)                             \outl0\strokewidth0 verideki bos hucre iceren sutunlari siler\outl0\strokewidth0 \
\
\'97 laptops["os_version"].value_counts(dropna=False)\
\
\'97 value_counts_before = laptops.loc[laptops["os_version"].isnull(), "os"].value_counts()\
laptops.loc[laptops["os"] == "macOS", "os_version"] = "X"\
laptops.loc[laptops["os"] == "No OS", "os_version"] = "Version Unknown"\
value_counts_after = laptops.loc[laptops["os_version"].isnull(), "os"].value_counts()\
\
\'97laptops["weight"] = laptops["weight"].str.replace("kgs","").str.replace("kg","").astype(float)                   weight sutunundaki kgs ve kg leri sildik ve type float yapt\uc0\u305 k boylece hepsi numeric oldu.\
laptops.rename(\{"weight": "weight_kg"\}, axis=1, inplace=True)                                                                 sutun ismini degitirdik \
laptops.to_csv('laptops_cleaned.csv',index=False)		                                                                            yen datayi cvs olarak kaydettik\
\
\
\
\
\
\
\
\
\
\
\
}