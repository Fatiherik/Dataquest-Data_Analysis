— import pandas as pd
mvc = pd.read_csv("nypd_mvc_2018.csv")

null_counts=mvc.isnull().sum()

—killed_cols = [col for col in mvc.columns if 'killed' in col]
killed = mvc[killed_cols].copy()

killed_manual_sum=killed.iloc[:,:3].sum(axis=1)
killed_mask=killed_manual_sum!=killed['total_killed']
killed_non_eq=killed[killed_mask]

—import numpy as np

# fix the killed values
killed['total_killed'] = killed['total_killed'].mask(killed['total_killed'].isnull(), killed_manual_sum)
killed['total_killed'] = killed['total_killed'].mask(killed['total_killed'] != killed_manual_sum, np.nan)

# Create an injured dataframe and manually sum values
injured = mvc[[col for col in mvc.columns if 'injured' in col]].copy()
injured_manual_sum = injured.iloc[:,:3].sum(axis=1)

	1.	Use Series.mask() to replace any null values from the total_injured column with their equivalents from the injured_manual_sum series

injured['total_injured'] = injured['total_injured'].mask(injured['total_injured'].isnull(), injured_manual_sum)

	2.	Use Series.mask() to replace any numbers from total_injured that aren't equal to their equivalents in injured_manual_sum with np.nan.

injured['total_injured'] = injured['total_injured'].mask(injured['total_injured'] != injured_manual_sum, np.nan)

— summary = {
    'injured': [
        mvc['total_injured'].isnull().sum(),
        injured['total_injured'].isnull().sum()
    ],
    'killed': [
        mvc['total_killed'].isnull().sum(),
        killed['total_killed'].isnull().sum()
    ]
}
print(pd.DataFrame(summary, index=['before','after']))


injured
killed
before
1
5
after
21
1

—mvc['total_injured']=injured['total_injured']
mvc['total_killed']=killed['total_killed']

—cols_with_missing_vals = mvc.columns[mvc.isnull().sum() > 0]
missing_corr = mvc[cols_with_missing_vals].isnull().corr()
print(missing_corr)								                     en az 1 bos deger bulunan sütunların korelasyon matrisi

— def plot_null_correlations(df):
    # create a correlation matrix only for columns with at least
    # one missing value
    cols_with_missing_vals = df.columns[df.isnull().sum() > 0]
    missing_corr = df[cols_with_missing_vals].isnull().corr()
    
    # create a mask to avoid repeated values and make
    # the plot easier to read
    missing_corr = missing_corr.iloc[1:, :-1]
    mask = np.triu(np.ones_like(missing_corr), k=1)
    
    # plot a heatmap of the values
    plt.figure(figsize=(20,14))
    ax = sns.heatmap(missing_corr, vmin=-1, vmax=1, cbar=False,
                     cmap='RdBu', mask=mask, annot=True)
    
    # format the text in the plot to make it easier to read
    for text in ax.texts:
        t = float(text.get_text())
        if -0.05 < t < 0.01:
            text.set_text('')
        else:
            text.set_text(round(t, 2))
        text.set_fontsize('x-large')
    plt.xticks(rotation=90, size='x-large')
    plt.yticks(rotation=0, size='x-large')

    plt.show()
    
vehicle=mvc[[col for col in mvc.columns if 'vehicle' in col]]
plot_null_correlations(vehicle)


— col_labels = ['v_number', 'vehicle_missing', 'cause_missing']

vc_null_data = []

for v in range(1,6):
    v_col = 'vehicle_{}'.format(v)
    c_col = 'cause_vehicle_{}'.format(v)
    
    v_null=(mvc[v_col].isnull()&mvc[c_col].notnull()).sum()
    c_null=(mvc[c_col].isnull()&mvc[v_col].notnull()).sum()
      
    vc_null_data.append([v, v_null, c_null])
    
vc_null_df=pd.DataFrame(vc_null_data, columns=col_labels)

— v_cols = [c for c in mvc.columns if c.startswith("vehicle")]
vehicle = mvc[v_cols]
vehicles_1d= vehicle.stack()						 stack() seçtiğimiz sutunlari tek sutun haline getiriyor. sonra value_count uygulayabiliyorsun. Mesela 5 sutunda en fazla tekrar eden deger ne?
top10_vehicles=vehicles_1d.value_counts()

— def summarize_missing():
    v_missing_data = []

    for v in range(1,6):
        v_col = 'vehicle_{}'.format(v)
        c_col = 'cause_vehicle_{}'.format(v)

        v_missing = (mvc[v_col].isnull() & mvc[c_col].notnull()).sum()
        c_missing = (mvc[c_col].isnull() & mvc[v_col].notnull()).sum()

        v_missing_data.append([v, v_missing, c_missing])

    col_labels = columns=["vehicle_number", "vehicle_missing", "cause_missing"]
    return pd.DataFrame(v_missing_data, columns=col_labels)

summary_before = summarize_missing()

for v in range(1,6):
    v_col = 'vehicle_{}'.format(v)
    c_col = 'cause_vehicle_{}'.format(v)
    
    v_missing_mask = mvc[v_col].isnull() & mvc[c_col].notnull()
    c_missing_mask = mvc[c_col].isnull() & mvc[v_col].notnull()
    
    mvc[v_col] =  mvc[v_col].mask(v_missing_mask, "Unspecified")
    mvc[c_col] =  mvc[c_col].mask(c_missing_mask, "Unspecified")
    
summary_after = summarize_missing()

—  sup_data = pd.read_csv('supplemental_data.csv')

location_cols = ['location', 'on_street', 'off_street', 'borough']
null_before = mvc[location_cols].isnull().sum()

for i in location_cols:
    missing_mask = mvc[i].isnull()
    mvc[i]=mvc[i].mask(missing_mask,sup_data[i])		                      eger bir hucre mvc tablosunda bossa onu sup_datadaki degerle dolduruyor
    
null_after= mvc[location_cols].isnull().sum()

— 










































