— import pandas as pd
hn=pd.read_csv('hacker_news.csv')

— import re

titles = hn["title"].tolist()
python_mentions = 0
pattern = "[Pp]ython"

for s in titles:
    if re.search(pattern, s):
        python_mentions += 1

print(python_mentions)

— pattern = '[Pp]ython'
titles=hn['title']
python_mentions=titles.str.contains(pattern).sum()		yukaridaki kod ile ayni seyi yapıyor

— titles = hn['title']
ruby_titles=titles[titles.str.contains('[Rr]uby')] 		sadece icinde ruby gecen satırlari aliyor

—email_bool = titles.str.contains("e-?mail")		icinde e-mail ya da email olup olmadigina bakıyor, true false diye bir liste donduruyor
email_count = email_bool.sum()				true olanları sayıyor 
email_titles = titles[email_bool]					true olanları gösteriyor

— pattern='\[\w+\]'							koseli parantezin regex te Ayri bir anlamı olduğunu icin kacis dizisi olarak \ kullandık, aradigimiz şey [pdf] gibi bişey yani koseli parantez ve harflerden olusan birsey.
tag_titles=titles[titles.str.contains(pattern)]
tag_count=tag_titles.shape[0]

— pattern = r"\[(\w+)\]"					aradigimiz say [pdf], [video] gibi koseli parantezli kelimler ancak gösterirken koseli par göstermek istemiyoruz, bunun icin () kullandık.
tag_freq=titles.str.extract(pattern).value_counts()

— def first_10_matches(pattern):
    """
    Return the first 10 story titles that match
    the provided regular expression
    """
    all_matches = titles[titles.str.contains(pattern)]
    return all_matches

java_titles= first_10_matches(r"[Jj]ava[^Ss]")			java kelimesinden sonra S veya s harfleri gelmeyecek

— def first_10_matches(pattern):
    """
    Return the first 10 story titles that match
    the provided regular expression
    """
    all_matches = titles[titles.str.contains(pattern)]
    return all_matches

java_titles= first_10_matches(r"\b[Jj]ava\b")			java kelimesine \b ile sinir koyduk, java kelimesini alıyor ama javascript

— pattern=r'^\[\w+\]'								^   cumleye [pdf] ile baslayanlar
beginning_count=titles.str.contains(pattern).sum()		
pattern2=r'\[\w+\]$'								$   cumle [pdf] ile bitenler
ending_count=titles.str.contains(pattern2).sum()

— import re

email_tests = pd.Series(['email', 'Email', 'e Mail', 'e mail', 'E-mail',
              'e-mail', 'eMail', 'E-Mail', 'EMAIL', 'emails', 'Emails',
              'E-Mails'])
pattern = r"\be[\-\s]?mails?\b"
email_mentions = email_test.str.contains(pattern, flags=re.I).sum()          flags=re.I case sensitive olmasını engelliyor































