— world_dev = pd.read_csv("World_dev.csv")
col_renaming = {'SourceOfMostRecentIncomeAndExpenditureData': 'IESurvey'}
merged=pd.merge(left=happiness2015, right=world_dev, how='left', left_on=happiness2015['Country'], right_on=world_dev['ShortName'])
merged=merged.rename(col_renaming, axis=1)

—def extract_last_word(element):
    listwords=str(element).split()
    return listwords[-1]

merged['Currency Apply']=merged['CurrencyUnit'].apply(extract_last_word)
merged['Currency Apply'].head()

—merged['Currency Vectorized']=merged['CurrencyUnit'].str.split().str.get(-1)              Series.str.method_name pandasin vectorized methodu.  her methoddan sonra str eklemeyi unutma
merged['Currency Vectorized'].head()				              

— merged['CurrencyUnit'].isnull().sum()    sutunda kac adet boş hücre oldugunu söylüyor

—lengths=merged['CurrencyUnit'].str.len()
value_counts=lengths.value_counts(dropna=False).                dropna=false  nan degerleri dusurmuyor

—pattern = r"[Nn]ational accounts"
national_accounts=merged['SpecialNotes'].str.contains(pattern)             kolonda patterndaki ifade var mi yok mu? Nan true veya false donduruyor
national_accounts.head()

—pattern = r"[Nn]ational accounts"
national_accounts=merged['SpecialNotes'].str.contains(pattern, na=False)                        na=false yapmazsak hata alıyoruz, çünkü national account icinde nan degerler kalıyor ve alt satırdaki indexleme işlemini yapamıyoruz.
merged_national_accounts=merged[national_accounts]
merged_national_accounts.head()

—pattern = r"[0-9]"
#lowercase letters
pattern1 = r"[a-z]"

#uppercase letters
pattern2 = r"[A-Z]"

pattern = r”[1-6][a-z][a-z]”.  3 karakter arıyoruz ilki 1-6 arasında bir sayı olabilir, 2 ve 3. Herhangi bir harf olabilir

pattern = r"[1-6][a-z][a-z]" = r"[1-6][a-z]{2}"      

pattern =r"([1-2][0-9]{3})"			                        1900 ve 2000 li yillari aradik
years=merged['SpecialNotes'].str.extract(pattern)         nan ve o yillari dondurdu, extract kullandigimiz icin patternda parantezler kullandık, normalde parantez yok dikkat et,

— pattern = r"([1-2][0-9]{3})"
years=merged['SpecialNotes'].str.extract(pattern, expand=True)               expand=true  sonuclari dataframe olarak donduruyor.

— merged = merged.set_index('Country')                country index sutunu yaptı

—pattern = r"(?P<Years>[1-2][0-9]{3})"		       years diye bir sutun basligi açıyor
years=merged['IESurvey'].str.extractall(pattern)	     extract sadece pattern ilk uyan alıyor, extractall butun hepsini seciyor
value_counts=years['Years'].value_counts()
print(value_counts)

—pattern = r"(?P<First_Year>[1-2][0-9]{3})/?(?P<Second_Year>[0-9]{2})?"
years=merged['IESurvey'].str.extractall(pattern)
first_two_year=years['First_Year'].str[:2]
years['Second_Year']=first_two_year+years['Second_Year']

— If part of the regex isn't grouped using parantheses, (), it won't be extracted. Yani yukaridaki ile r"(?P<First_Year>[1-2][0-9]{3})(/)?(?P<Second_Year>[0-9]{2})?" Bu ifade farkli sonuclar veriyor.

—merged['IncomeGroup']=merged['IncomeGroup'].str.strip()
pv_incomes = merged.pivot_table(values='Happiness Score', index='IncomeGroup')
pv_incomes.plot(kind='bar', rot=30, ylim=(0,10))

— merged['IncomeGroup'] = merged['IncomeGroup'].str.replace(' income', '').str.replace(':', '').str.upper()
pv_incomes = merged.pivot_table(values='Happiness Score', index='IncomeGroup')
pv_incomes.plot(kind='bar', rot=30, ylim=(0,10))

—Method

Description
Series.str.split()
Splits each element in the Series.
Series.str.strip()
Strips whitespace from each string in the Series.
Series.str.lower()
Converts strings in the Series to lowercase.
Series.str.upper()
Converts strings in the Series to uppercase.
Series.str.get()
Retrieves the ith element of each element in the Series.
Series.str.replace()
Replaces a regex or string in the Series with another string.
Series.str.cat()
Concatenates strings in a Series.
Series.str.extract()
Extracts substrings from the Series matching a regex pattern.
